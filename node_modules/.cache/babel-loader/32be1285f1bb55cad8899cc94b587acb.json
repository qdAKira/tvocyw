{"remainingRequest":"D:\\Git\\yangkou-balance-management-system\\node_modules\\thread-loader\\dist\\cjs.js!D:\\Git\\yangkou-balance-management-system\\node_modules\\babel-loader\\lib\\index.js!D:\\Git\\yangkou-balance-management-system\\src\\request\\http.js","dependencies":[{"path":"D:\\Git\\yangkou-balance-management-system\\src\\request\\http.js","mtime":1615858294397},{"path":"D:\\Git\\yangkou-balance-management-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1613790689000},{"path":"D:\\Git\\yangkou-balance-management-system\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1613790689000},{"path":"D:\\Git\\yangkou-balance-management-system\\node_modules\\babel-loader\\lib\\index.js","mtime":1613790689000}],"contextDependencies":[],"result":["import _objectSpread from \"D:\\\\Git\\\\yangkou-balance-management-system\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport axios from 'axios';\nimport QS from 'qs';\nimport router from \"./../router\"; // 环境的切换\n// if (process.env.NODE_ENV == 'development') {\n// \taxios.defaults.baseURL = 'http://36.152.189.94:22083';\n// } else if (process.env.NODE_ENV == 'debug') {\n// \taxios.defaults.baseURL = 'http://36.152.189.94:22083';\n// } else if (process.env.NODE_ENV == 'production') {\n// \taxios.defaults.baseURL = 'http://36.152.189.94:22083';\n// }\n\nif (process.env.NODE_ENV == 'development') {\n  axios.defaults.baseURL = '/api';\n} else if (process.env.NODE_ENV == 'debug') {\n  axios.defaults.baseURL = '/api';\n} else if (process.env.NODE_ENV == 'production') {\n  axios.defaults.baseURL = '/api';\n}\n\nglobal.baseURL = axios.defaults.baseURL; // 请求超时时间\n\naxios.defaults.timeout = 10000; // post请求头\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8;';\naxios.defaults.withCredentials = true; // axios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8;';\n// axios.defaults.crossDomain = true;\n// 请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n  // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n  var token = localStorage.getItem('token');\n  token && (config.headers.Authorization = \"Bearer \" + token);\n  return config;\n}, function (error) {\n  return Promise.error(error);\n}); // 响应拦截器\n\naxios.interceptors.response.use(function (response) {\n  if (response.status === 200) {\n    return Promise.resolve(response);\n  } else {\n    return Promise.reject(response);\n  }\n}, // 服务器状态码不是200的情况    \nfunction (error) {\n  console.log(error.response.status);\n\n  if (error.response.status) {\n    switch (error.response.status) {\n      // 401: 未登录                \n      // 未登录则跳转登录页面，并携带当前页面的路径                \n      // 在登录成功后返回当前页面，这一步需要在登录页操作。                \n      case 401:\n        if (router.currentRoute.path != '/login') {\n          router.replace({\n            path: '/login',\n            query: {\n              redirect: router.currentRoute.fullPath\n            }\n          });\n        }\n\n        break;\n      // 403 token过期                \n      // 登录过期对用户进行提示                \n      // 清除本地token和清空vuex中token对象                \n      // 跳转登录页面                \n\n      case 403:\n        Toast({\n          message: '登录过期，请重新登录',\n          duration: 1000,\n          forbidClick: true\n        }); // 清除token                    \n\n        localStorage.removeItem('token');\n        store.commit('loginSuccess', null); // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n\n        setTimeout(function () {\n          router.replace({\n            path: '/login',\n            query: {\n              redirect: router.currentRoute.fullPath\n            }\n          });\n        }, 1000);\n        break;\n      // 404请求不存在                \n\n      case 404:\n        Toast({\n          message: '网络请求不存在',\n          duration: 1500,\n          forbidClick: true\n        });\n        break;\n      // 其他错误，直接抛出错误提示                \n\n      default:\n        Toast({\n          message: error.response.data.message,\n          duration: 1500,\n          forbidClick: true\n        });\n    }\n\n    return Promise.reject(error.response);\n  }\n});\n/** \r\n * get方法，对应get请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\n\nexport function get(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  });\n}\n/** \r\n * post方法，对应post请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\n\nexport function post(url, params) {\n  // var data = QS.stringify(params)\n  return new Promise(function (resolve, reject) {\n    axios.post(url, params).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  });\n}\n/** \r\n * download方法，对应文件下载请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\n\nexport function download(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.get(url, _objectSpread({\n      responseType: 'blob'\n    }, params)).then(function (res) {\n      console.log(res);\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  });\n}\n/** \r\n * delete方法，对应delete请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\n\nexport function del(url, params) {\n  return new Promise(function (resolve, reject) {\n    // var data = QS.stringify(params,{indices:false})\n    axios.delete(url, {\n      data: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  });\n}\n/** \r\n * put方法，对应put请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\n\nexport function put(url, params) {\n  // var data = QS.stringify(params)\n  return new Promise(function (resolve, reject) {\n    axios.put(url, params).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  });\n}",{"version":3,"sources":["D:\\Git\\yangkou-balance-management-system\\src\\request\\http.js"],"names":["axios","QS","router","process","env","NODE_ENV","defaults","baseURL","global","timeout","headers","post","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","response","status","resolve","reject","console","log","currentRoute","path","replace","query","redirect","fullPath","Toast","message","duration","forbidClick","removeItem","store","commit","setTimeout","data","get","url","params","then","res","catch","err","download","responseType","del","delete","put"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport QS from 'qs'\r\nimport router from './../router'\r\n\r\n// 环境的切换\r\n// if (process.env.NODE_ENV == 'development') {\r\n// \taxios.defaults.baseURL = 'http://36.152.189.94:22083';\r\n// } else if (process.env.NODE_ENV == 'debug') {\r\n// \taxios.defaults.baseURL = 'http://36.152.189.94:22083';\r\n// } else if (process.env.NODE_ENV == 'production') {\r\n// \taxios.defaults.baseURL = 'http://36.152.189.94:22083';\r\n// }\r\n\r\nif (process.env.NODE_ENV == 'development') {\r\n\taxios.defaults.baseURL = '/api';\r\n} else if (process.env.NODE_ENV == 'debug') {\r\n\taxios.defaults.baseURL = '/api';\r\n} else if (process.env.NODE_ENV == 'production') {\r\n\taxios.defaults.baseURL = '/api';\r\n}\r\n\r\nglobal.baseURL = axios.defaults.baseURL\r\n\r\n// 请求超时时间\r\naxios.defaults.timeout = 10000;\r\n\r\n// post请求头\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8;';\r\naxios.defaults.withCredentials = true;\r\n// axios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8;';\r\n// axios.defaults.crossDomain = true;\r\n\r\n// 请求拦截器\r\naxios.interceptors.request.use(\r\n\tconfig => {\r\n\t\t// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\r\n\t\t// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\r\n\t\tconst token = localStorage.getItem('token')\r\n\t\ttoken && (config.headers.Authorization = \"Bearer \" + token);\r\n\t\treturn config;\r\n\t},\r\n\terror => {\r\n\t\treturn Promise.error(error);\r\n\t})\r\n\r\n// 响应拦截器\r\naxios.interceptors.response.use(\r\n\tresponse => {\r\n\t\tif (response.status === 200) {\r\n\t\t\treturn Promise.resolve(response);\r\n\t\t} else {\r\n\t\t\treturn Promise.reject(response);\r\n\t\t}\r\n\t},\r\n\t// 服务器状态码不是200的情况    \r\n\terror => {\r\n\t\tconsole.log(error.response.status)\r\n\t\tif (error.response.status) {\r\n\t\t\tswitch (error.response.status) {\r\n\t\t\t\t// 401: 未登录                \r\n\t\t\t\t// 未登录则跳转登录页面，并携带当前页面的路径                \r\n\t\t\t\t// 在登录成功后返回当前页面，这一步需要在登录页操作。                \r\n\t\t\t\tcase 401:\r\n\t\t\t\t\tif (router.currentRoute.path != '/login') {\r\n\t\t\t\t\t\trouter.replace({\r\n\t\t\t\t\t\t\tpath: '/login',\r\n\t\t\t\t\t\t\tquery: {\r\n\t\t\t\t\t\t\t\tredirect: router.currentRoute.fullPath\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t// 403 token过期                \r\n\t\t\t\t\t// 登录过期对用户进行提示                \r\n\t\t\t\t\t// 清除本地token和清空vuex中token对象                \r\n\t\t\t\t\t// 跳转登录页面                \r\n\t\t\t\tcase 403:\r\n\t\t\t\t\tToast({\r\n\t\t\t\t\t\tmessage: '登录过期，请重新登录',\r\n\t\t\t\t\t\tduration: 1000,\r\n\t\t\t\t\t\tforbidClick: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// 清除token                    \r\n\t\t\t\t\tlocalStorage.removeItem('token');\r\n\t\t\t\t\tstore.commit('loginSuccess', null);\r\n\t\t\t\t\t// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\trouter.replace({\r\n\t\t\t\t\t\t\tpath: '/login',\r\n\t\t\t\t\t\t\tquery: {\r\n\t\t\t\t\t\t\t\tredirect: router.currentRoute.fullPath\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}, 1000);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t// 404请求不存在                \r\n\t\t\t\tcase 404:\r\n\t\t\t\t\tToast({\r\n\t\t\t\t\t\tmessage: '网络请求不存在',\r\n\t\t\t\t\t\tduration: 1500,\r\n\t\t\t\t\t\tforbidClick: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t// 其他错误，直接抛出错误提示                \r\n\t\t\t\tdefault:\r\n\t\t\t\t\tToast({\r\n\t\t\t\t\t\tmessage: error.response.data.message,\r\n\t\t\t\t\t\tduration: 1500,\r\n\t\t\t\t\t\tforbidClick: true\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn Promise.reject(error.response);\r\n\t\t}\r\n\t});\r\n\r\n/** \r\n * get方法，对应get请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\r\nexport function get(url, params) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\taxios.get(url, {\r\n\t\t\tparams: params\r\n\t\t}).then(res => {\r\n\t\t\tresolve(res.data);\r\n\t\t}).catch(err => {\r\n\t\t\treject(err.data)\r\n\t\t})\r\n\t})\r\n}\r\n\r\n/** \r\n * post方法，对应post请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\r\nexport function post(url, params) {\r\n\t// var data = QS.stringify(params)\r\n\treturn new Promise((resolve, reject) => {\r\n\t\taxios.post(url, params)\r\n\t\t\t.then(res => {\r\n\t\t\t\tresolve(res.data);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\treject(err.data)\r\n\t\t\t})\r\n\t})\r\n}\r\n\r\n/** \r\n * download方法，对应文件下载请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\r\nexport function download(url, params) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\taxios.get(url, {\r\n\t\t\tresponseType: 'blob',\r\n\t\t\t...params\r\n\t\t}).then(res => {\r\n\t\t\tconsole.log(res)\r\n\t\t\tresolve(res.data);\r\n\t\t}).catch(err => {\r\n\t\t\treject(err.data)\r\n\t\t})\r\n\t})\r\n}\r\n\r\n/** \r\n * delete方法，对应delete请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\r\nexport function del(url, params) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// var data = QS.stringify(params,{indices:false})\r\n\t\taxios.delete(url, {\r\n\t\t\t\tdata: params\r\n\t\t\t})\r\n\t\t\t.then(res => {\r\n\t\t\t\tresolve(res.data);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\treject(err.data)\r\n\t\t\t})\r\n\t})\r\n}\r\n\r\n/** \r\n * put方法，对应put请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\r\nexport function put(url, params) {\r\n\t// var data = QS.stringify(params)\r\n\treturn new Promise((resolve, reject) => {\r\n\t\taxios.put(url, params)\r\n\t\t\t.then(res => {\r\n\t\t\t\tresolve(res.data);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\treject(err.data)\r\n\t\t\t})\r\n\t})\r\n}\n"]}]}