{"remainingRequest":"E:\\尚维斯\\水环境管理系统HTML\\yangkou-balance-management-system\\node_modules\\babel-loader\\lib\\index.js!E:\\尚维斯\\水环境管理系统HTML\\yangkou-balance-management-system\\src\\request\\http.js","dependencies":[{"path":"E:\\尚维斯\\水环境管理系统HTML\\yangkou-balance-management-system\\src\\request\\http.js","mtime":1613625912365},{"path":"E:\\尚维斯\\水环境管理系统HTML\\yangkou-balance-management-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1612248228397},{"path":"E:\\尚维斯\\水环境管理系统HTML\\yangkou-balance-management-system\\node_modules\\babel-loader\\lib\\index.js","mtime":1612248228116}],"contextDependencies":[],"result":["import _objectSpread from \"E:\\\\\\u5C1A\\u7EF4\\u65AF\\\\\\u6C34\\u73AF\\u5883\\u7BA1\\u7406\\u7CFB\\u7EDFHTML\\\\yangkou-balance-management-system\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport QS from 'qs'; // 环境的切换\n\nif (process.env.NODE_ENV == 'development') {\n  axios.defaults.baseURL = 'http://10.0.0.73:22083/';\n} else if (process.env.NODE_ENV == 'debug') {\n  axios.defaults.baseURL = 'http://10.0.0.73:22083/';\n} else if (process.env.NODE_ENV == 'production') {\n  axios.defaults.baseURL = 'http://10.0.0.73:22083/';\n} // 请求超时时间\n\n\naxios.defaults.timeout = 10000; // post请求头\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8;'; // axios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8;';\n\naxios.defaults.crossDomain = true; // 请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\n  // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n  var token = localStorage.getItem('token');\n  console.log(token);\n  token && (config.headers.Authorization = \"Bearer \" + token);\n  return config;\n}, function (error) {\n  return Promise.error(error);\n}); // 响应拦截器\n\naxios.interceptors.response.use(function (response) {\n  console.log(response.status);\n\n  if (response.status === 200) {\n    return Promise.resolve(response);\n  } else {\n    return Promise.reject(response);\n  }\n}, // 服务器状态码不是200的情况    \nfunction (error) {\n  console.log(error.response.status); // if (error.response.status) {\n  // \tswitch (error.response.status) {\n  // \t\t// 401: 未登录                \n  // \t\t// 未登录则跳转登录页面，并携带当前页面的路径                \n  // \t\t// 在登录成功后返回当前页面，这一步需要在登录页操作。                \n  // \t\tcase 401:\n  // \t\t\trouter.replace({\n  // \t\t\t\tpath: '/login',\n  // \t\t\t\tquery: {\n  // \t\t\t\t\tredirect: router.currentRoute.fullPath\n  // \t\t\t\t}\n  // \t\t\t});\n  // \t\t\tbreak;\n  // \t\t\t// 403 token过期                \n  // \t\t\t// 登录过期对用户进行提示                \n  // \t\t\t// 清除本地token和清空vuex中token对象                \n  // \t\t\t// 跳转登录页面                \n  // \t\tcase 403:\n  // \t\t\tToast({\n  // \t\t\t\tmessage: '登录过期，请重新登录',\n  // \t\t\t\tduration: 1000,\n  // \t\t\t\tforbidClick: true\n  // \t\t\t});\n  // \t\t\t// 清除token                    \n  // \t\t\tlocalStorage.removeItem('token');\n  // \t\t\tstore.commit('loginSuccess', null);\n  // \t\t\t// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\n  // \t\t\tsetTimeout(() => {\n  // \t\t\t\trouter.replace({\n  // \t\t\t\t\tpath: '/login',\n  // \t\t\t\t\tquery: {\n  // \t\t\t\t\t\tredirect: router.currentRoute.fullPath\n  // \t\t\t\t\t}\n  // \t\t\t\t});\n  // \t\t\t}, 1000);\n  // \t\t\tbreak;\n  // \t\t\t// 404请求不存在                \n  // \t\tcase 404:\n  // \t\t\tToast({\n  // \t\t\t\tmessage: '网络请求不存在',\n  // \t\t\t\tduration: 1500,\n  // \t\t\t\tforbidClick: true\n  // \t\t\t});\n  // \t\t\tbreak;\n  // \t\t\t// 其他错误，直接抛出错误提示                \n  // \t\tdefault:\n  // \t\t\tToast({\n  // \t\t\t\tmessage: error.response.data.message,\n  // \t\t\t\tduration: 1500,\n  // \t\t\t\tforbidClick: true\n  // \t\t\t});\n  // \t}\n  // \treturn Promise.reject(error.response);\n  // }\n});\n/** \r\n * get方法，对应get请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\n\nexport function get(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  });\n}\n/** \r\n * post方法，对应post请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\n\nexport function post(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.post(url, params).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  });\n}\nexport function download(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.get(url, _objectSpread({\n      responseType: 'blob'\n    }, params)).then(function (res) {\n      console.log(res);\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err.data);\n    });\n  });\n}",{"version":3,"sources":["E:\\尚维斯\\水环境管理系统HTML\\yangkou-balance-management-system\\src\\request\\http.js"],"names":["axios","QS","process","env","NODE_ENV","defaults","baseURL","timeout","headers","post","crossDomain","interceptors","request","use","config","token","localStorage","getItem","console","log","Authorization","error","Promise","response","status","resolve","reject","get","url","params","then","res","data","catch","err","download","responseType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf,C,CAEA;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,aAA5B,EAA2C;AAC1CJ,EAAAA,KAAK,CAACK,QAAN,CAAeC,OAAf,GAAyB,yBAAzB;AACA,CAFD,MAEO,IAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,OAA5B,EAAqC;AAC3CJ,EAAAA,KAAK,CAACK,QAAN,CAAeC,OAAf,GAAyB,yBAAzB;AACA,CAFM,MAEA,IAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,YAA5B,EAA0C;AAChDJ,EAAAA,KAAK,CAACK,QAAN,CAAeC,OAAf,GAAyB,yBAAzB;AACA,C,CAED;;;AACAN,KAAK,CAACK,QAAN,CAAeE,OAAf,GAAyB,KAAzB,C,CAEA;;AACAP,KAAK,CAACK,QAAN,CAAeG,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA8C,kDAA9C,C,CACA;;AACAT,KAAK,CAACK,QAAN,CAAeK,WAAf,GAA6B,IAA7B,C,CAEA;;AACAV,KAAK,CAACW,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACC,UAAAC,MAAM,EAAI;AACT;AACA;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACAA,EAAAA,KAAK,KAAKD,MAAM,CAACN,OAAP,CAAeY,aAAf,GAA+B,YAAYL,KAAhD,CAAL;AACA,SAAOD,MAAP;AACA,CARF,EASC,UAAAO,KAAK,EAAI;AACR,SAAOC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAP;AACA,CAXF,E,CAaA;;AACArB,KAAK,CAACW,YAAN,CAAmBY,QAAnB,CAA4BV,GAA5B,CACC,UAAAU,QAAQ,EAAI;AACXL,EAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACC,MAArB;;AACA,MAAID,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC5B,WAAOF,OAAO,CAACG,OAAR,CAAgBF,QAAhB,CAAP;AACA,GAFD,MAEO;AACN,WAAOD,OAAO,CAACI,MAAR,CAAeH,QAAf,CAAP;AACA;AACD,CARF,EASC;AACA,UAAAF,KAAK,EAAI;AACRH,EAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACE,QAAN,CAAeC,MAA3B,EADQ,CAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlEF;AAqEA;;;;;;AAKA,OAAO,SAASG,GAAT,CAAaC,GAAb,EAAkBC,MAAlB,EAA0B;AAChC,SAAO,IAAIP,OAAJ,CAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AACvC1B,IAAAA,KAAK,CAAC2B,GAAN,CAAUC,GAAV,EAAe;AACdC,MAAAA,MAAM,EAAEA;AADM,KAAf,EAEGC,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACdN,MAAAA,OAAO,CAACM,GAAG,CAACC,IAAL,CAAP;AACA,KAJD,EAIGC,KAJH,CAIS,UAAAC,GAAG,EAAI;AACfR,MAAAA,MAAM,CAACQ,GAAG,CAACF,IAAL,CAAN;AACA,KAND;AAOA,GARM,CAAP;AASA;AAED;;;;;;AAKA,OAAO,SAASvB,IAAT,CAAcmB,GAAd,EAAmBC,MAAnB,EAA2B;AACjC,SAAO,IAAIP,OAAJ,CAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AACvC1B,IAAAA,KAAK,CAACS,IAAN,CAAWmB,GAAX,EAAgBC,MAAhB,EACEC,IADF,CACO,UAAAC,GAAG,EAAI;AACZN,MAAAA,OAAO,CAACM,GAAG,CAACC,IAAL,CAAP;AACA,KAHF,EAIEC,KAJF,CAIQ,UAAAC,GAAG,EAAI;AACbR,MAAAA,MAAM,CAACQ,GAAG,CAACF,IAAL,CAAN;AACA,KANF;AAOA,GARM,CAAP;AASA;AAED,OAAO,SAASG,QAAT,CAAkBP,GAAlB,EAAuBC,MAAvB,EAA+B;AACrC,SAAO,IAAIP,OAAJ,CAAY,UAACG,OAAD,EAAUC,MAAV,EAAqB;AACvC1B,IAAAA,KAAK,CAAC2B,GAAN,CAAUC,GAAV;AACCQ,MAAAA,YAAY,EAAE;AADf,OAEIP,MAFJ,GAGGC,IAHH,CAGQ,UAAAC,GAAG,EAAI;AACdb,MAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;AACAN,MAAAA,OAAO,CAACM,GAAG,CAACC,IAAL,CAAP;AACA,KAND,EAMGC,KANH,CAMS,UAAAC,GAAG,EAAI;AACfR,MAAAA,MAAM,CAACQ,GAAG,CAACF,IAAL,CAAN;AACA,KARD;AASA,GAVM,CAAP;AAWA","sourcesContent":["import axios from 'axios'\r\nimport QS from 'qs'\r\n\r\n// 环境的切换\r\nif (process.env.NODE_ENV == 'development') {\r\n\taxios.defaults.baseURL = 'http://10.0.0.73:22083/';\r\n} else if (process.env.NODE_ENV == 'debug') {\r\n\taxios.defaults.baseURL = 'http://10.0.0.73:22083/';\r\n} else if (process.env.NODE_ENV == 'production') {\r\n\taxios.defaults.baseURL = 'http://10.0.0.73:22083/';\r\n}\r\n\r\n// 请求超时时间\r\naxios.defaults.timeout = 10000;\r\n\r\n// post请求头\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8;';\r\n// axios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8;';\r\naxios.defaults.crossDomain = true;\r\n\r\n// 请求拦截器\r\naxios.interceptors.request.use(\r\n\tconfig => {\r\n\t\t// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\r\n\t\t// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\r\n\t\tconst token = localStorage.getItem('token')\r\n\t\tconsole.log(token)\r\n\t\ttoken && (config.headers.Authorization = \"Bearer \" + token);\r\n\t\treturn config;\r\n\t},\r\n\terror => {\r\n\t\treturn Promise.error(error);\r\n\t})\r\n\r\n// 响应拦截器\r\naxios.interceptors.response.use(\r\n\tresponse => {\r\n\t\tconsole.log(response.status)\r\n\t\tif (response.status === 200) {\r\n\t\t\treturn Promise.resolve(response);\r\n\t\t} else {\r\n\t\t\treturn Promise.reject(response);\r\n\t\t}\r\n\t},\r\n\t// 服务器状态码不是200的情况    \r\n\terror => {\r\n\t\tconsole.log(error.response.status)\r\n\t\t// if (error.response.status) {\r\n\t\t// \tswitch (error.response.status) {\r\n\t\t// \t\t// 401: 未登录                \r\n\t\t// \t\t// 未登录则跳转登录页面，并携带当前页面的路径                \r\n\t\t// \t\t// 在登录成功后返回当前页面，这一步需要在登录页操作。                \r\n\t\t// \t\tcase 401:\r\n\t\t// \t\t\trouter.replace({\r\n\t\t// \t\t\t\tpath: '/login',\r\n\t\t// \t\t\t\tquery: {\r\n\t\t// \t\t\t\t\tredirect: router.currentRoute.fullPath\r\n\t\t// \t\t\t\t}\r\n\t\t// \t\t\t});\r\n\t\t// \t\t\tbreak;\r\n\t\t// \t\t\t// 403 token过期                \r\n\t\t// \t\t\t// 登录过期对用户进行提示                \r\n\t\t// \t\t\t// 清除本地token和清空vuex中token对象                \r\n\t\t// \t\t\t// 跳转登录页面                \r\n\t\t// \t\tcase 403:\r\n\t\t// \t\t\tToast({\r\n\t\t// \t\t\t\tmessage: '登录过期，请重新登录',\r\n\t\t// \t\t\t\tduration: 1000,\r\n\t\t// \t\t\t\tforbidClick: true\r\n\t\t// \t\t\t});\r\n\t\t// \t\t\t// 清除token                    \r\n\t\t// \t\t\tlocalStorage.removeItem('token');\r\n\t\t// \t\t\tstore.commit('loginSuccess', null);\r\n\t\t// \t\t\t// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面\r\n\t\t// \t\t\tsetTimeout(() => {\r\n\t\t// \t\t\t\trouter.replace({\r\n\t\t// \t\t\t\t\tpath: '/login',\r\n\t\t// \t\t\t\t\tquery: {\r\n\t\t// \t\t\t\t\t\tredirect: router.currentRoute.fullPath\r\n\t\t// \t\t\t\t\t}\r\n\t\t// \t\t\t\t});\r\n\t\t// \t\t\t}, 1000);\r\n\t\t// \t\t\tbreak;\r\n\t\t// \t\t\t// 404请求不存在                \r\n\t\t// \t\tcase 404:\r\n\t\t// \t\t\tToast({\r\n\t\t// \t\t\t\tmessage: '网络请求不存在',\r\n\t\t// \t\t\t\tduration: 1500,\r\n\t\t// \t\t\t\tforbidClick: true\r\n\t\t// \t\t\t});\r\n\t\t// \t\t\tbreak;\r\n\t\t// \t\t\t// 其他错误，直接抛出错误提示                \r\n\t\t// \t\tdefault:\r\n\t\t// \t\t\tToast({\r\n\t\t// \t\t\t\tmessage: error.response.data.message,\r\n\t\t// \t\t\t\tduration: 1500,\r\n\t\t// \t\t\t\tforbidClick: true\r\n\t\t// \t\t\t});\r\n\t\t// \t}\r\n\t\t// \treturn Promise.reject(error.response);\r\n\t\t// }\r\n\t}\r\n);\r\n\r\n/** \r\n * get方法，对应get请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\r\nexport function get(url, params) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\taxios.get(url, {\r\n\t\t\tparams: params\r\n\t\t}).then(res => {\r\n\t\t\tresolve(res.data);\r\n\t\t}).catch(err => {\r\n\t\t\treject(err.data)\r\n\t\t})\r\n\t})\r\n}\r\n\r\n/** \r\n * post方法，对应post请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\r\nexport function post(url, params) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\taxios.post(url, params)\r\n\t\t\t.then(res => {\r\n\t\t\t\tresolve(res.data);\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\treject(err.data)\r\n\t\t\t})\r\n\t})\r\n}\r\n\r\nexport function download(url, params) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\taxios.get(url, {\r\n\t\t\tresponseType: 'blob',\r\n\t\t\t...params\r\n\t\t}).then(res => {\r\n\t\t\tconsole.log(res)\r\n\t\t\tresolve(res.data);\r\n\t\t}).catch(err => {\r\n\t\t\treject(err.data)\r\n\t\t})\r\n\t})\r\n}\r\n"]}]}